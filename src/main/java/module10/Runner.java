package module10;

import com.sun.deploy.util.StringUtils;
import com.sun.org.apache.xpath.internal.SourceTree;
import javafx.scene.control.Tab;
import module10.task1.ColumnData;
import module10.task1.TableData;
import module10.task2.dao.base.DAO;
import module10.task2.dao.friendships.FriendshipDAOType;
import module10.task2.dao.likes.LikeDAOType;
import module10.task2.dao.posts.PostDAOType;
import module10.task2.dao.users.AdvancedUserDAOType;
import module10.task2.dao.users.UserDAOType;
import module10.task2.entities.*;
import module3.task1.db.Connections;
import org.h2.table.Table;
import org.jboss.weld.environment.se.events.ContainerInitialized;

import javax.enterprise.event.Observes;
import javax.inject.Inject;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * JDBC Advanced Techniques. Task 2: JDBC data generation and simple reporting
 * 1. Create simple database with tables
 * Users (id, name, surname, birthdate),
 * Friendships (userid1, userid2, timestamp),
 * Posts(id, userId, text, timestamp),
 * Likes (postid, userid, timestamp).
 * 2. Fill tables with data which are make sense (> 1 000 users, > 70 000 friendships, > 300 000 likes in 2015).
 * 3. Program should print out all names (only distinct) of users
 * who has more when 100 friends and 100 likes in March 2015.
 * <p>
 * All actions (table creation, insert data and reading) should be implemented with JDBC.
 */


/*Write Database Copy Console Tool which will copy database (URL/Name is command line parameter) step by step

Required functionality:

1. Tables in lexicographic order
2. Rows in direct or reverse order (Command Line Parameter)
3. It works for 10 GB database in minimal time (should tune performance using Java and database performance features)

*10 GB sample database may be generated by separate command as an optional subtask (Highload Writing Tool)*/
public class Runner {
    @Inject @UserDAOType
    DAO<User> userDAO;

    @Inject @PostDAOType
    DAO<Post> postDAO;

    @Inject @LikeDAOType
    DAO<Like> likeDAO;

    @Inject @FriendshipDAOType
    DAO<Friendship> friendshipDAO;

    @Inject @AdvancedUserDAOType
    DAO<AdvancedUser> advancedUserDAO;


    public void startup(@Observes ContainerInitialized event) throws URISyntaxException {
        doTask2();
    }

    private void doTask2() {
        List<User> userList = null;
        List<Friendship> friendshipList = null;
        List<Post> postsList = null;
        List<Like> likesList = null;
        try {
            userList = GenerateUtils.generateUsers();
            System.out.println(userList);
            friendshipList = GenerateUtils.generateFriendships();
            postsList = GenerateUtils.generatePosts();
            likesList = GenerateUtils.generateLikes();
        } catch (IOException e) {
            System.out.println("Error during data generation:\n" + e.getStackTrace());
            return;
        }


        try {

            //rempoving
            likeDAO.dropTable();
            postDAO.dropTable();
            friendshipDAO.dropTable();
            userDAO.dropTable();

            //creation
            userDAO.createTable();
            friendshipDAO.createTable();
            postDAO.createTable();
            likeDAO.createTable();

            userDAO.addItems(userList);
            friendshipDAO.addItems(friendshipList);
            postDAO.addItems(postsList);
            likeDAO.addItems(likesList);

            System.out.println("Database was created");
            System.out.println("Users who has more when 100 friends and 100 likes in March 2015 are: ");
            System.out.println(advancedUserDAO.getAllItems());


        } catch (SQLException e) {
            e.printStackTrace();
        }
    }




}
