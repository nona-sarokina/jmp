package module10;

import module10.task1.copy.H2TableCopier;
import module10.task1.copy.ITableCopier;
import module10.task1.copy.Order;
import module10.task2.dao.base.DAO;
import module10.task2.dao.friendships.FriendshipDAOType;
import module10.task2.dao.likes.LikeDAOType;
import module10.task2.dao.posts.PostDAOType;
import module10.task2.dao.users.AdvancedUserDAOType;
import module10.task2.dao.users.UserDAOType;
import module10.task2.entities.*;
import org.jboss.weld.environment.se.Weld;
import org.jboss.weld.environment.se.WeldContainer;

import javax.inject.Inject;
import javax.inject.Singleton;

import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * JDBC Advanced Techniques. Task 2: JDBC data generation and simple reporting
 * 1. Create simple database with tables
 * Users (id, name, surname, birthdate),
 * Friendships (userid1, userid2, timestamp),
 * Posts(id, userId, text, timestamp),
 * Likes (postid, userid, timestamp).
 * 2. Fill tables with data which are make sense (> 1 000 users, > 70 000 friendships, > 300 000 likes in 2015).
 * 3. Program should print out all names (only distinct) of users
 * who has more when 100 friends and 100 likes in March 2015.
 * <p>
 * All actions (table creation, insert data and reading) should be implemented with JDBC.
 */

/*Write Database Copy Console Tool which will copy database (URL/Name is command line parameter) step by step

        Required functionality:

        1. Tables in lexicographic order
        2. Rows in direct or reverse order (Command Line Parameter)
        3. It works for 10 GB database in minimal time (should tune performance using Java and database performance features)

        *10 GB sample database may be generated by separate command as an optional subtask (Highload Writing Tool)*/
@Singleton
public class Runner {
    //public static final String URL = "jdbc:h2:D:/projects/IntelliJIdea/jmp/src/main/resources/module10;MV_STORE=FALSE;MVCC=FALSE";
    @Inject
    @UserDAOType
    DAO<User> userDAO;

    @Inject
    @PostDAOType
    DAO<Post> postDAO;

    @Inject
    @LikeDAOType
    DAO<Like> likeDAO;

    @Inject
    @FriendshipDAOType
    DAO<Friendship> friendshipDAO;

    @Inject
    @AdvancedUserDAOType
    DAO<AdvancedUser> advancedUserDAO;

    ExecutorService service = Executors.newCachedThreadPool();

    private static String URL;
    private static String orderValue;

    public static String getUrl() {
        return URL;
    }


    public void run() throws IOException {
        doTask2();
        doTask1(URL, orderValue);
    }
    public static void main(String[] args) throws IOException {
        if (args.length  < 1) {
            return;        }
        URL = args[0];
        orderValue = args[1];

        Weld theWeld = new Weld();
        WeldContainer theContainer = theWeld.initialize();

        theContainer.instance().select(Runner.class).get().run();

        theWeld.shutdown();
    }



    private void doTask2() {
        List<User> userList = null;
        List<Friendship> friendshipList = null;
        List<Post> postsList = null;
        List<Like> likesList = null;
        try {
            userList = GenerateUtils.generateUsers();
            friendshipList = GenerateUtils.generateFriendships();
            postsList = GenerateUtils.generatePosts();
            likesList = GenerateUtils.generateLikes();
        } catch (IOException e) {
            System.out.println("Error during data generation:\n" + e.getStackTrace());
            return;
        }

        try {
            likeDAO.dropTable();
            postDAO.dropTable();
            friendshipDAO.dropTable();
            userDAO.dropTable();

            userDAO.createTable();
            friendshipDAO.createTable();
            postDAO.createTable();
            likeDAO.createTable();

            System.out.println("Database was created, going to insert data");

            userDAO.addItems(userList);
            friendshipDAO.addItems(friendshipList);
            postDAO.addItems(postsList);
            likeDAO.addItems(likesList);

            System.out.println("Users who has more when 100 friends and 100 likes in March 2015 are: ");
            System.out.println(advancedUserDAO.getAllItems());

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private void doTask1(String url, String enteredOrder) {
        Order order = Order.valueOf(enteredOrder);
        ITableCopier iTableCopier = new H2TableCopier(url);
        iTableCopier.copy(order);
    }









}
